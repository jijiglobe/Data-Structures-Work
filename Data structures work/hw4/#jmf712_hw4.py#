import ctypes  # provides low-level arrays
from random import randint
import copy
def make_array(n):
    return (n * ctypes.py_object)()

def split_by_sign(lst, low, high):
    if low >= high:
        return lst
    if lst[low] < 0 and lst[high] >=0:
        return split_by_sign(lst,low+1,high-1)
    if lst[low] >= 0 and lst[high] < 0:
        lst[low], lst[high] = lst[high], lst[low]
        return split_by_sign(lst,low+1,high-1)
    if lst[low] < 0 and lst[high] <0:
        return split_by_sign(lst,low+1,high)
    if lst[low] >=0 and lst[high] >= 0:
        return split_by_sign(lst,low,high-1)

def test_split():
    #I can just leave these in right?
    test_passed = True
    for x in range(100):
        test = []
        for y in range(randint(0,200)):
            test.append(randint(-1000,1000))
        split_by_sign(test,0,len(test)-1)
        for y in range(1,len(test)):
            if test[y-1] >=0 and test[y] < 0:
                test_passed = False
    if test_passed:
        print("TEST PASSED")
    else:
        print("TEST FAILED")

def permutations(lst,low,high):
    if low>= high:
        return [[lst[low]]]
    ans = []
    perms = permutations(lst,low+1,high)
    for perm in perms:
        for index in range(len(perm)+1):
            permCopy = copy.copy(perm)
            permCopy.insert(index,lst[low])
            ans.append(permCopy)
    return ans

def find_duplicates(lst):
    found = {}
    ans = []
    for x in lst:
        if x in found:
            if found[x] == 1:
                ans.append(x)
                found[x]+=1
        else:
            found[x] = 1
    return ans

def test_duplicates():
    test=[2,4,4,1,2]
    print(find_duplicates(test))
    test=[]
    print(find_duplicates(test))
    test=[1,2,4,4,1,2]
    print(find_duplicates(test))
    test=[2,32,2,2,3,4,4,56,6,6,6,4,4,1,2]
    print(find_duplicates(test))
    test=[2]
    print(find_duplicates(test))
    test=[2,2,2,2]
    print(find_duplicates(test))

def remove_all(lst,value):
    count = 0
    for index in range(len(lst)):
        if lst[index] == value:
            count +=1
        else:
            lst[index - count] = lst[index]
    for x in range(count):
        lst.pop()

def test_remove():
    test_passed = True
    for x in range(200):
        test = []
        for x in range(randint(0,50)):
            test.append(randint(-10,10))
        test2 = copy.deepcopy(test)
        removal = randint(-10,10)
        remove_all(test,removal)
        if test != [x for x in test2 if x!=removal]:
            test_passed = False    
    if test_passed:
        print("TEST PASSED")
    else:
        print("TEST FAILED")
class MyList:
    def __init__(self):
        self.data = make_array(1)
        self.capacity = 1
        self.n = 0


    def __len__(self):
        return self.n


    def append(self, val):
        if (self.n == self.capacity):
            self.resize(2 * self.capacity)
        self.data[self.n] = val
        self.n += 1


    def resize(self, new_size):
        new_array = make_array(new_size)
        for i in range(self.n):
            new_array[i] = self.data[i]
        self.data = new_array
        self.capacity = new_size


    def extend(self, other):
        for elem in other:
            self.append(elem)


    def __getitem__(self, ind):
        if ind < 0:
            ind = len(self)+ind
        if (not (0 <= ind <= self.n - 1)):
            raise IndexError('invalid index')

        return self.data[ind]


    def __setitem__(self, ind, val):
        if ind < 0:
            ind = len(self)+ind
        if (not (0 <= ind <= self.n - 1)):
            raise IndexError('invalid index')

        self.data[ind] = val

    def __str__(self):
        if self.n == 0:
            return "[]"
    def __str__(self):
        if self.n == 0:
            return "[]"
        ans = "["
        for x in range(self.n):
            ans+=str(self.data[x])+", "
        return ans[0:-2]+"]"

    
    def __add__(self,other):
        ans = MyList()
        ans.data =make_array(self.n+other.n)
        ans.n = self.n+other.n
        ans.capacity = ans.n
        for x in range(self.n):
            ans[x] = self.data[x]
        for x in range(other.n):
            ans[x+self.n] = other.data[x]
        return ans
    def __iadd__(self,other):
        for x in range(other.n):
            self.append(other.data[x])
        return self
    def __mul__(self,mulVal):
        ans = MyList()
        for x in range(mulVal):
            ans+=self
        return ans
    def __rmul__(self,other):
        return self * other
    def insert(self,index,value):
        if (not (0 <= index <= self.n)):
            raise IndexError('invalid index')
        if self.n == self.capacity:
            self.resize(self.capacity * 2)
        if self.n == index:
            self.append(value)
            return
        if self.n == 1 and index == 0:
            self.n+=1
            self.data[1] = self.data[0]
            self.data[0] = value
            return
        self.n+=1
        for x in range(self.n-1,index,-1):
            self.data[x] = self.data[x-1]
        self.data[index] = value
    def pop(self):
        if (self.n-1) * 4 < self.capacity:
            self.resize(self.capacity // 2)
        self.n -=1
        return self.n
def test_pop():
    test = MyList()
    
    for x in range(100):
        test.append(x)
    for x in range(100):
        print(test)
        print(test.pop())
def test_insert():
    test_passed = True
    for x in range(200):
        testList = MyList()
        control = []
        for x in range(randint(0,10)):
            if str(testList) != str(control):
                test_passed = False
                print(testList)
                print(control)
            testval = randint(-100,100)
            testIndex = randint(0,len(testList))
            testList.insert(testIndex,testval)
            control.insert(testIndex,testval)
    print(test_passed)

